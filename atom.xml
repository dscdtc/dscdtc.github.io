<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>城  野</title>
  
  <subtitle>subtitle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dscdtc.ml/"/>
  <updated>2018-01-28T08:31:44.699Z</updated>
  <id>http://dscdtc.ml/</id>
  
  <author>
    <name>dscdtc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python高效编程</title>
    <link href="http://dscdtc.ml/Python%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B.html"/>
    <id>http://dscdtc.ml/Python高效编程.html</id>
    <published>2018-01-20T09:17:52.000Z</published>
    <updated>2018-01-28T08:31:44.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇记录汇总实际编程和面试中都可能会遇到的典型问题。</p></blockquote><a id="more"></a><h2 id="在列表-字典-集合中根据条件筛选数据"><a href="#在列表-字典-集合中根据条件筛选数据" class="headerlink" title="在列表,字典,集合中根据条件筛选数据"></a>在列表,字典,集合中根据条件筛选数据</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</div><div class="line">​</div><div class="line">data = [randint(<span class="number">-10</span>,<span class="number">10</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"></div><div class="line">filter(<span class="keyword">lambda</span> x:x &gt;= <span class="number">0</span>,data)</div><div class="line"><span class="comment">#首选列表解析 时间比filter少一半左右</span></div><div class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x &gt;= <span class="number">0</span>]</div><div class="line">​</div><div class="line">data = &#123;x:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">21</span>)&#125;</div><div class="line">&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> data.items() <span class="keyword">if</span> v &gt; <span class="number">90</span>&#125;</div><div class="line">​</div><div class="line">data = set(data)</div><div class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> data <span class="keyword">if</span> x%<span class="number">3</span>==<span class="number">0</span>&#125;</div></pre></td></tr></table></figure><h2 id="为元组-列表中每个元素命名-提高程序的可读性"><a href="#为元组-列表中每个元素命名-提高程序的可读性" class="headerlink" title="为元组/列表中每个元素命名,提高程序的可读性"></a>为元组/列表中每个元素命名,提高程序的可读性</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#第一种</span></div><div class="line">NAME,AGE,SEX,EMAIL = range(<span class="number">4</span>)</div><div class="line">student = (<span class="string">'Jan'</span>,<span class="number">14</span>,<span class="string">'male'</span>,<span class="string">'jan@jan.net'</span>)</div><div class="line">print(student[NAME])</div><div class="line"></div><div class="line"><span class="comment">#第二种</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line">Student = namedtuple(<span class="string">'Student'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>,<span class="string">'email'</span>])</div><div class="line">student= Student(<span class="string">'Jan'</span>,<span class="number">14</span>,<span class="string">'male'</span>,<span class="string">'jan@jan.net'</span>)</div><div class="line">print(student[NAME])</div><div class="line">student.age</div><div class="line">isinstance(student,tuple)</div></pre></td></tr></table></figure><h2 id="统计序列中元素的出现频度"><a href="#统计序列中元素的出现频度" class="headerlink" title="统计序列中元素的出现频度"></a>统计序列中元素的出现频度</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line">data = [randint(<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">20</span>)]</div><div class="line">c = dict.fromkeys(data,<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">#第一种</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> data:</div><div class="line">    c[x]+=<span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">#第二种</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line">c2 = Counter(data)</div><div class="line"><span class="comment">#出现频度最高的三个</span></div><div class="line">c2.most_common(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">#统计一篇文章中单词出现次数</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="comment">#导入Python之禅</span></div><div class="line"><span class="keyword">import</span> this</div><div class="line">c3 = Counter(re.split(<span class="string">'\W+'</span>,this.s))</div></pre></td></tr></table></figure><h2 id="根据字典中值的大小-对字典中的项排序"><a href="#根据字典中值的大小-对字典中的项排序" class="headerlink" title="根据字典中值的大小,对字典中的项排序"></a>根据字典中值的大小,对字典中的项排序</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line">data = &#123;x:randint(<span class="number">60</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abcdefg'</span>&#125;</div><div class="line"><span class="comment">#sorted(data.values())</span></div><div class="line"></div><div class="line"><span class="comment">#第一种</span></div><div class="line">t = zip(data.values(),data.keys())</div><div class="line">sorted(t)</div><div class="line"></div><div class="line"><span class="comment">#第二种</span></div><div class="line">sorted(data.items(),key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</div></pre></td></tr></table></figure><h2 id="快速找到多个字典中的公共键-key"><a href="#快速找到多个字典中的公共键-key" class="headerlink" title="快速找到多个字典中的公共键(key)"></a>快速找到多个字典中的公共键(key)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint,sample</div><div class="line"></div><div class="line">s1 = &#123;x: randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefgh'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</div><div class="line">s2 = &#123;x: randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefgh'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</div><div class="line">s3 = &#123;x: randint(<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">for</span> x <span class="keyword">in</span> sample(<span class="string">'abcdefgh'</span>,randint(<span class="number">3</span>,<span class="number">6</span>))&#125;</div><div class="line"></div><div class="line"><span class="comment">#第一种</span></div><div class="line">res = []</div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s1:</div><div class="line">    <span class="keyword">if</span> k <span class="keyword">in</span> s2 <span class="keyword">and</span> k <span class="keyword">in</span> s3:</div><div class="line">        res.append(k)</div><div class="line"></div><div class="line"><span class="comment">#第二种</span></div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"></div><div class="line">s1.keys()&amp;s2.keys()&amp;s3.keys()</div><div class="line">map(dict.keys,[s1,s2,s3])</div><div class="line">reduce(<span class="keyword">lambda</span> a, b:a &amp; b,map(dict.keys,[s1,s2,s3]))</div></pre></td></tr></table></figure><h2 id="实现用户的历史记录功能-最多n条"><a href="#实现用户的历史记录功能-最多n条" class="headerlink" title="实现用户的历史记录功能(最多n条)"></a>实现用户的历史记录功能(最多n条)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line">N = randint(<span class="number">0</span>,<span class="number">100</span>)</div><div class="line"><span class="comment">## 一个容纳5个值的队列</span></div><div class="line">history = deque([],<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess</span><span class="params">(k)</span>:</span></div><div class="line">    <span class="keyword">if</span> k == N:</div><div class="line">        print(<span class="string">'right!'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> k &lt; N:</div><div class="line">        print(<span class="string">'%s is less than N'</span>%k)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'%s is greater than N'</span>%k)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    input_number = input(<span class="string">'please input a number: '</span>)</div><div class="line">    <span class="keyword">if</span> input_number.isdigit():</div><div class="line">        k = int(input_number)</div><div class="line">        history.append(k)</div><div class="line">        <span class="keyword">if</span> guess(k):</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">elif</span> input_number == <span class="string">'history'</span>:</div><div class="line">        print(list(history))</div></pre></td></tr></table></figure><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇记录汇总实际编程和面试中都可能会遇到的典型问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python中的天坑--dict</title>
    <link href="http://dscdtc.ml/Python%E4%B8%AD%E7%9A%84%E5%A4%A9%E5%9D%91-dict.html"/>
    <id>http://dscdtc.ml/Python中的天坑-dict.html</id>
    <published>2018-01-17T09:22:34.000Z</published>
    <updated>2018-01-28T07:45:34.688Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Python中的字典是无序的(不能人为重新排序):<br><br>（1）键值的哈希碰撞，hash(key1) == hash(key2)时，向字典里连续添加的这个两个键的顺序是不可以控制的，也是无法做到连续的，后来的键会按算法调整到其它位置。<br><br>（2）字典空间扩容，当键的数量超过字典默认开的空间时，字典会做空间扩容，扩容后的键顺和创建顺序就会发生变化，不受人为控制。<br><a id="more"></a></p></blockquote><h1 id="有序字典实现方案"><a href="#有序字典实现方案" class="headerlink" title="有序字典实现方案"></a>有序字典实现方案</h1><h2 id="1-采取对list-tuple内部元素命名的方法来代替dict"><a href="#1-采取对list-tuple内部元素命名的方法来代替dict" class="headerlink" title="1 采取对list/tuple内部元素命名的方法来代替dict"></a>1 采取对list/tuple内部元素命名的方法来代替dict</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Method1[推荐写法]</span></div><div class="line">NAME,AGE,SEX,EMAIL = xrange(<span class="number">4</span>) <span class="comment"># py3中使用range(4)</span></div><div class="line">student = (<span class="string">'Jan'</span>,<span class="number">14</span>,<span class="string">'male'</span>,<span class="string">'jan@jan.net'</span>)</div><div class="line"><span class="comment">#student = ['Jan',14,'male','jan@jan.net']</span></div><div class="line">print(student[NAME])</div><div class="line"></div><div class="line"><span class="comment"># Method2</span></div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line">Student = namedtuple(<span class="string">'Student'</span>,[<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'sex'</span>,<span class="string">'email'</span>])</div><div class="line">student= Student(<span class="string">'Jan'</span>,<span class="number">14</span>,<span class="string">'male'</span>,<span class="string">'jan@jan.net'</span>)</div><div class="line">print(student[NAME])</div><div class="line">student.age</div><div class="line">isinstance(student,tuple)</div></pre></td></tr></table></figure><h2 id="2-sorted-函数排序"><a href="#2-sorted-函数排序" class="headerlink" title="2 sorted()函数排序"></a>2 sorted()函数排序</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">my_dict=&#123;<span class="string">"cc"</span>:<span class="number">100</span>,<span class="string">"aa"</span>:<span class="number">200</span>,<span class="string">"bb"</span>:<span class="number">10</span>&#125;</div><div class="line"></div><div class="line"><span class="comment"># 按key升序, 返回元组列表</span></div><div class="line">print(sorted(my_dict.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))</div><div class="line">&gt;&gt;&gt;[(<span class="string">'aa'</span>, <span class="number">200</span>), (<span class="string">'bb'</span>, <span class="number">10</span>), (<span class="string">'cc'</span>, <span class="number">100</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 按value降序, 返回元组列表</span></div><div class="line">print(sorted(my_dict.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="keyword">True</span>))</div><div class="line">&gt;&gt;&gt;[(<span class="string">'aa'</span>, <span class="number">200</span>), (<span class="string">'cc'</span>, <span class="number">100</span>), (<span class="string">'bb'</span>, <span class="number">10</span>)]</div></pre></td></tr></table></figure><h2 id="3-使用标准库collections中的OrderedDict"><a href="#3-使用标准库collections中的OrderedDict" class="headerlink" title="3 使用标准库collections中的OrderedDict()"></a>3 使用标准库collections中的<code>OrderedDict()</code></h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</div><div class="line">orderDict=OrderedDict()</div><div class="line">orderDict[<span class="string">'a'</span>]=<span class="number">1</span></div><div class="line">orderDict[<span class="string">'b'</span>]=<span class="number">2</span></div><div class="line">orderDict[<span class="string">'c'</span>]=<span class="number">3</span></div><div class="line">print(orderDict)</div><div class="line"></div><div class="line">&gt;&gt;&gt;OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</div><div class="line"><span class="comment"># 原生dict:如果让orderDict=dict(),则会输出</span></div><div class="line"><span class="comment"># &gt;&gt;&gt;&#123;'a': 1, 'c': 3, 'b': 2&#125;</span></div></pre></td></tr></table></figure><blockquote><p><em>OrderedDict()虽然是好东西，但是它内部维护了一个双向链表,若数据量很大的话，会非常消耗内存.</em></p></blockquote><h1 id="字典的Pythonic技巧"><a href="#字典的Pythonic技巧" class="headerlink" title="字典的Pythonic技巧"></a>字典的Pythonic技巧</h1><ul><li>提取部分子集</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#提取分数超过90分的学生信息，并变成字典</span></div><div class="line">students_score=&#123;<span class="string">'jack'</span>:<span class="number">80</span>, <span class="string">'james'</span>:<span class="number">91</span>, <span class="string">'leo'</span>:<span class="number">100</span>, <span class="string">'sam'</span>:<span class="number">60</span>&#125;</div><div class="line">good_score=&#123;name:score <span class="keyword">for</span> name,score <span class="keyword">in</span> students_score.items() <span class="keyword">if</span> score&gt;<span class="number">90</span>&#125;</div><div class="line">print(good_score)</div><div class="line">&gt;&gt;&gt;&#123;<span class="string">'james'</span>: <span class="number">91</span>, <span class="string">'leo'</span>: <span class="number">100</span>&#125;</div></pre></td></tr></table></figure><ul><li>字典中的最值</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">stocks=&#123;<span class="string">'wanke'</span>:<span class="number">25.6</span>,<span class="string">'wuliangye'</span>:<span class="number">32.3</span>,<span class="string">'maotai'</span>:<span class="number">299.5</span>,<span class="string">'huatai'</span>:<span class="number">18.6</span>&#125;</div><div class="line">print(min(stocks.values()))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">18.6</span></div><div class="line">print(max(stocks.values()))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">299.5</span></div></pre></td></tr></table></figure><ul><li>使用<code>zip()</code>进行翻转</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stocks = &#123;<span class="string">'wanke'</span>:<span class="number">25.6</span>,<span class="string">'wuliangye'</span>:<span class="number">32.3</span>,<span class="string">'maotai'</span>:<span class="number">299.5</span>,<span class="string">'huatai'</span>:<span class="number">18.6</span>&#125;</div><div class="line">new_stocks = zip(stocks.values(), stocks.keys())</div></pre></td></tr></table></figure><blockquote><p><em>若碰到比较大的字典，数据量很多很长的时候，最好用Python标准库里的itertools模块(这个模块非常有用,可以关注下)</em></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> izip</div><div class="line">invert_stocks2=dict(izip(stocks.itervalues(),stocks.iterkeys()))</div><div class="line">print(invert_stocks2)</div></pre></td></tr></table></figure><h1 id="字典的方法们"><a href="#字典的方法们" class="headerlink" title="字典的方法们"></a>字典的方法们</h1><ul><li><p><code>get()</code></p><blockquote><p>字典的取值: 一种是使用直接key的方式来进行读取，也就是dict[key]，当key不存在的时候，会发生KeyError的异常(良好的代码，一定是要考虑健壮性,切记)。另外一种则使用get的方式，当使用get方法的时候，默认情况下返回的None，如果key存在，那么就会返回这个key对应的值。<br><br><strong>[建议]:尽量用dict.get()来代替dict[key]</strong></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(prices.get(<span class="string">'peach'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">None</span></div><div class="line">print(prices.get(<span class="string">'apple'</span>), <span class="string">'Not Found'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span></div><div class="line">print(prices.get(<span class="string">'peach'</span>), <span class="string">'Not Found'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Not Found</div></pre></td></tr></table></figure></li><li><p><code>pop()</code></p><blockquote><p>获取并删除键值对</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'kel'</span>&#125;</div><div class="line">d.pop(<span class="string">'name'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'kel'</span></div><div class="line">d.pop(<span class="string">'kel'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  KeyError: <span class="string">'kel'</span></div><div class="line"><span class="comment"># 使用默认值，则不会在键不存在的时候出现异常</span></div><div class="line">d.pop(<span class="string">'kel'</span>,<span class="string">'key is not exist'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'key is not exist'</span></div></pre></td></tr></table></figure></li><li><p><code>setdefault()</code></p><blockquote><p>setdefault方法主要是用来设置字典的键值，当一个键存在的时候，直接使用已经存在的值，当键不存在的时候，那么就添加一个值。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'kel'</span>&#125;</div><div class="line">d.setdefault(<span class="string">'kel'</span>,<span class="string">'person'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'person'</span></div><div class="line">d</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'kel'</span>: <span class="string">'person'</span>, <span class="string">'name'</span>: <span class="string">'kel'</span>&#125;</div><div class="line"></div><div class="line">d.setdefault(<span class="string">'kel'</span>,<span class="string">'animal'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'person'</span></div><div class="line">d</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'kel'</span>: <span class="string">'person'</span>, <span class="string">'name'</span>: <span class="string">'kel'</span>&#125;</div></pre></td></tr></table></figure><blockquote><p>当字典中的值是列表的时候，那么就可以使用方法<code>d.setdefault(&#39;key&#39;,[]).append(somevalue)</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d.setdefault(<span class="string">'abc'</span>,[]).append(<span class="string">'123'</span>)</div><div class="line">d</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'kel'</span>: <span class="string">'person'</span>, <span class="string">'name'</span>: <span class="string">'kel'</span>, <span class="string">'abc'</span>: [<span class="string">'123'</span>]&#125;</div></pre></td></tr></table></figure><p>当值不能重复的时候，可以使用set集合<code>d3.setdefault(&#39;key&#39;,set()).add(somevalue)</code></p></blockquote></li><li><p><code>fromkeys()</code></p><blockquote><p>创建具有默认值的字典</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dict.fromkeys((<span class="string">'age'</span>,<span class="string">'name'</span>), <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'age'</span>: <span class="keyword">None</span>, <span class="string">'name'</span>: <span class="keyword">None</span>&#125;</div></pre></td></tr></table></figure><p>创建字典的另外两种方式:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d = dict(name=<span class="string">'kel'</span>,age=<span class="number">32</span>) <span class="comment"># 键名不能是关键字且必须符合变量命名</span></div><div class="line">d = &#123;<span class="string">'name'</span>:<span class="string">'kel'</span>,<span class="string">'age'</span>:<span class="number">32</span>&#125;</div></pre></td></tr></table></figure></blockquote></li><li><p><code>dict1.update(dict2)</code></p><blockquote><p>把字典dict2的键/值对更新到dict1里</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dict1 = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</div><div class="line">dict2 = &#123;<span class="string">'Sex'</span>: <span class="string">'female'</span>, <span class="string">'Age'</span>: <span class="number">666</span>&#125;</div><div class="line">dict1.update(dict2)</div><div class="line">dict1</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'Age'</span>: <span class="number">666</span>, <span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Sex'</span>: <span class="string">'female'</span>&#125;</div></pre></td></tr></table></figure></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = &#123;<span class="string">'Sex'</span>: <span class="string">'female'</span>, <span class="string">'Age'</span>:<span class="number">65536</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict1.update(dict2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict1</div><div class="line">&#123;<span class="string">'Age'</span>: <span class="number">65536</span>, <span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Sex'</span>: <span class="string">'female'</span>&#125;</div></pre></td></tr></table></figure></li><li><p><code>dict.has_key(key)</code></p><blockquote><p>如果键在字典dict里返回true，否则返回false</p></blockquote></li><li><p><code>values()</code></p><blockquote><p>返回包含字典中所有值的列表</p></blockquote></li><li><p><code>keys()</code></p><blockquote><p>返回包含字典中所有键的列表</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Python中的字典是无序的(不能人为重新排序):&lt;br&gt;&lt;br&gt;（1）键值的哈希碰撞，hash(key1) == hash(key2)时，向字典里连续添加的这个两个键的顺序是不可以控制的，也是无法做到连续的，后来的键会按算法调整到其它位置。&lt;br&gt;&lt;br&gt;（2）字典空间扩容，当键的数量超过字典默认开的空间时，字典会做空间扩容，扩容后的键顺和创建顺序就会发生变化，不受人为控制。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>re踩坑之旅</title>
    <link href="http://dscdtc.ml/re%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85.html"/>
    <id>http://dscdtc.ml/re踩坑之旅.html</id>
    <published>2017-12-27T10:34:11.000Z</published>
    <updated>2018-01-21T11:00:42.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="re踩坑之旅"><a href="#re踩坑之旅" class="headerlink" title="re踩坑之旅"></a>re踩坑之旅</h1><blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）, 可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等.<br><a id="more"></a></p></blockquote><h2 id="re中的方法们"><a href="#re中的方法们" class="headerlink" title="re中的方法们"></a>re中的方法们</h2><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">pattern</td><td>匹配的正则表达式(模式字符串)</td></tr><tr><td style="text-align:center">string</td><td>要被查找替换的原始字符串</td></tr><tr><td style="text-align:center">flags</td><td>标志位, 控制正则表达式的匹配方式</td></tr><tr><td style="text-align:center">repl</td><td>替换的字符串, 也可为一个函数</td></tr><tr><td style="text-align:center">count</td><td>替换的最大次数, 默认0, 表示替换所有的匹配</td></tr></tbody></table><table><thead><tr><th style="text-align:center">修饰符(flag)</th><th style="text-align:center">全称</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">re.I</td><td style="text-align:center">IGNORECASE</td><td>使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td style="text-align:center">LOCALE</td><td>本地化识别, 让\w, \W, \b, \B,取决于当前语言设置</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">MULTILINE</td><td>多行匹配, 影响 ^ 和 $</td></tr><tr><td style="text-align:center">re.S</td><td style="text-align:center">DOTALL</td><td>使 . 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">VERBOSE</td><td>匹配时忽略pattern中的空白符, 使你可以为正则表达式添加注释</td></tr><tr><td style="text-align:center">re.U</td><td style="text-align:center">UNICODE</td><td>根据Unicode字符集解析字符, 这个标志影响 \w, \W, \b, \B</td></tr></tbody></table><ul><li><p>字符串匹配</p><ul><li><p><code>re.match(pattern, string, flags=0)</code></p><blockquote><p>如果在<em>字符串的开头</em>的零个或更多字符匹配正则表达式模式, 将返回相应的MatchObject实例.返回None则该字符串中与模式不匹配；<strong>即使在多行模式下, re.match()将只匹配字符串的开头, 而不是在每个行的开头</strong>.</p></blockquote></li><li><p><code>re.search(pattern, string, flags=0)</code></p><blockquote><p>寻找的<em>第一个由该正则表达式模式产生匹配的位置</em>, 并返回相应的MatchObject实例.返回None则没有字符串中的位置匹配模式.</p></blockquote></li><li><p><code>re.sub(pattern, repl, string, count=0, flags=0)</code></p><blockquote><p>按<code>pattern</code>匹配字符串<code>string</code>中的相应字符并替换为<code>repl</code> (<em>repl可以是返回字符串的函数</em>), 替换<code>count</code>次, 返回替换后的新字符串(不改变原字符串), 若未匹配到则返回原字符串.<strong><code>count</code>默认为0, 表示替换所有的匹配</strong>.</p></blockquote></li><li><p><code>re.subn(pattern, repl, string, count=0, flags=0)</code></p><blockquote><p>同上, 返回值为一个元组:<strong>（替换后的新字符串, 替换次数）</strong>.</p></blockquote></li><li><p><code>re.findall(pattern, string, flags=0)</code></p><blockquote><p>返回字符串(string)中所有非重叠匹配的模式(pattern)组成的<strong>列表</strong>.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'xx\dxx'</span>, <span class="string">'xx1xx2xx3xx4xx5xx'</span>)</div><div class="line">[<span class="string">'xx1xx'</span>, <span class="string">'xx3xx'</span>, <span class="string">'xx5xx'</span>]</div></pre></td></tr></table></figure></blockquote></li><li><p><code>re.split(pattern, string, maxsplit=0, flags=0)</code></p><blockquote><p>按(pattern)匹配字符串(string)中的相应字符并替换为(repl), 替换(count)次, 返回替换后的新字符串.<strong>count默认为0, 表示替换所有的匹配</strong>.</p></blockquote></li></ul></li><li><p>Match Objects方法</p><ul><li><p><code>group(num=0)</code></p><blockquote><p>匹配的整个表达式的字符串, group() 可以一次输入多个组号, 在这种情况下它将返回一个包含那些组所对应值的元组.如果单个参数, 结果是一个单一的字符串 ；如果有多个参数, 其结果是参数每一项的元组.</p></blockquote></li><li><p><code>groups()</code></p><blockquote><p>返回一个包含所有小组字符串的元组.</p></blockquote></li></ul></li><li><p>pattern操作</p><ul><li><p><code>re.purge()</code></p><blockquote><p>清除正则表达式缓存</p></blockquote></li><li><p><code>re.finditer(pattern, string, flags=0)</code></p><blockquote><p>同<code>re.findall</code>, 返回迭代器</p></blockquote></li><li><p><code>re.compile(pattern, flags=0)</code></p><blockquote><p>编译一个正则的模式(pattern), 创建模式对象。可以实现更有效率的匹配, 返回模式对象, 使用<code>re.compile()</code>函数进行转换后，<code>re.search(pattern, string)</code>的调用方式就转换为<code>pattern.search(string)</code>的调用方式</p></blockquote></li><li><p><code>re.template(pattern, flags=0)</code></p><blockquote><p>编译一个用于正则模板的模式(pattern), 返回模式对象</p></blockquote></li><li><p><code>re.escape(pattern)</code></p><blockquote><p>返回字符串, 转译<code>pattern</code>中所有非字母数字；如果你想匹配一个任意的文本字符串, 它可能包含正则表达式元字符.</p></blockquote></li></ul></li></ul><h2 id="正则表达式模式语法"><a href="#正则表达式模式语法" class="headerlink" title="正则表达式模式语法"></a>正则表达式模式语法</h2><table><thead><tr><th style="text-align:center">定位符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td>匹配字符串的开头, 若设置了re.M 还会与 \n 或 \r 之后的位置匹配</td></tr><tr><td style="text-align:center">$</td><td>匹配字符串的末尾</td></tr><tr><td style="text-align:center">\b</td><td>匹配一个字边界, 即字与空格间的位置</td></tr><tr><td style="text-align:center">\B</td><td>非字边界匹配</td></tr><tr><td style="text-align:center">\A</td><td>匹配字符串开始</td></tr><tr><td style="text-align:center">\Z</td><td>匹配字符串结束, 如果是存在换行, 只匹配到换行前的结束字符串</td></tr><tr><td style="text-align:center">\z</td><td>匹配字符串结束</td></tr><tr><td style="text-align:center">\G</td><td>匹配最后匹配完成的位置</td></tr><tr><td style="text-align:center">\1…\9</td><td>匹配第n个分组的内容</td></tr><tr><td style="text-align:center">\10</td><td>匹配第n个分组的内容, 如果它经匹配, 否则指的是八进制字符码的表达式</td></tr></tbody></table><table><thead><tr><th style="text-align:center">限定符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>匹配前面的子表达式零次或多次(默认贪婪greedy,尽可能多匹配)</td></tr><tr><td style="text-align:center">+</td><td>匹配前面的子表达式一次或多次(默认贪婪greedy,尽可能多匹配)</td></tr><tr><td style="text-align:center">?</td><td>匹配前面的子表达式零次或一次, 或指明一个非贪婪限定符</td></tr><tr><td style="text-align:center">*?, +?, ??</td><td>限定符的非贪婪模式, 尽可能少的匹配</td></tr><tr><td style="text-align:center">{n}</td><td>匹配前面的子表达式确定的 n 次</td></tr><tr><td style="text-align:center">{n,}</td><td>匹配前面的子表达式至少 n 次</td></tr><tr><td style="text-align:center">{n,m}</td><td>匹配前面的子表达式 n到m 次, <strong>逗号和两个数之间不能有空格, 贪婪方式</strong></td></tr></tbody></table><table><thead><tr><th style="text-align:center">非打印字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td>匹配一个换行符 等价于 \x0a 和 \cJ</td></tr><tr><td style="text-align:center">\r</td><td>匹配一个回车符 等价于 \x0d 和 \cM</td></tr><tr><td style="text-align:center">\s</td><td>匹配任何空白字符, 包括空格、制表符、换页符等等 等价于 [ \f\n\r\t\v]</td></tr><tr><td style="text-align:center">\S</td><td>匹配任何非空白字符 等价于 [^ \f\n\r\t\v]</td></tr><tr><td style="text-align:center">\t</td><td>匹配一个制表符 等价于 \x09 和 \cI</td></tr><tr><td style="text-align:center">\v</td><td>匹配一个垂直制表符 等价于 \x0b 和 \cK</td></tr><tr><td style="text-align:center">\f</td><td>匹配一个换页符 等价于 \x0c 和 \cL</td></tr><tr><td style="text-align:center">\cx</td><td>匹配由x指明的控制字符 例如, \cM匹配一个<code>Control-M</code>或回车符x的值必须为A-Z或a-z之一否则,将c视为一个原义的’c’字符</td></tr></tbody></table><table><thead><tr><th style="text-align:center">特殊字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>匹配任意单字符(除换行符), 当re.S标记被指定时, 可匹配换行符</td></tr><tr><td style="text-align:center">()</td><td>标记一个子表达式的开始和结束位置, 子表达式可以获取供以后使用</td></tr><tr><td style="text-align:center">\</td><td>将下一个字符标记为或特殊字符, 或原义字符, 或向后引用, 或八进制转义符</td></tr><tr><td style="text-align:center">a&brvbar;b</td><td>匹配a或b</td></tr><tr><td style="text-align:center">(?imx: re)</td><td>在括号中使用i, m, 或 x 可选标志</td></tr><tr><td style="text-align:center">(?-imx: re)</td><td>在括号中不使用i, m, 或 x 可选标志</td></tr><tr><td style="text-align:center">(?#…)</td><td>注释</td></tr><tr><td style="text-align:center">(?= re)</td><td>前向肯定界定符。如果所含正则表达式, 在当前位置成功匹配时成功, 剩余部分还要尝试界定符的右边</td></tr><tr><td style="text-align:center">(?! re)</td><td>前向否定界定符。当所含表达式不能在字符串当前位置匹配时成功</td></tr></tbody></table><h2 id="连续替换"><a href="#连续替换" class="headerlink" title="连续替换"></a>连续替换</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">my_str = <span class="string">"(condition1) and --condition2--"</span></div><div class="line"><span class="keyword">print</span> my_str.replace(<span class="string">"condition1"</span>, <span class="string">""</span>).replace(<span class="string">"condition2"</span>, <span class="string">"text"</span>)</div><div class="line"></div><div class="line">rep = &#123;<span class="string">"condition1"</span>: <span class="string">""</span>, <span class="string">"condition2"</span>: <span class="string">"text"</span>&#125;</div><div class="line">rep = dict((re.escape(k), v) <span class="keyword">for</span> k, v <span class="keyword">in</span> rep.iteritems())</div><div class="line">pattern = re.compile(<span class="string">"|"</span>.join(rep.keys()))</div><div class="line">my_str = pattern.sub(<span class="keyword">lambda</span> m: rep[re.escape(m.group(<span class="number">0</span>))], my_str)</div><div class="line"></div><div class="line"><span class="keyword">print</span> my_str</div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Output:</span></div><div class="line"><span class="string">() and --text--</span></div><div class="line"><span class="string">"""</span></div></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="file:///C://python27/Lib/re.py" title="//Python27/Lib/re.py" target="_blank" rel="noopener">re源码</a>,<br><a href="http://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">菜鸟教程</a>,<br><a href="http://blog.csdn.net/u014467169/article/details/51345657" target="_blank" rel="noopener">CSDN博客1</a>,<br><a href="http://blog.csdn.net/caroline_wendy/article/details/47065115" target="_blank" rel="noopener">CSDN博客2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;re踩坑之旅&quot;&gt;&lt;a href=&quot;#re踩坑之旅&quot; class=&quot;headerlink&quot; title=&quot;re踩坑之旅&quot;&gt;&lt;/a&gt;re踩坑之旅&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）, 可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等.&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://dscdtc.ml/categories/Python/"/>
    
    
      <category term="Python" scheme="http://dscdtc.ml/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 优雅编程之 str.format()</title>
    <link href="http://dscdtc.ml/%E4%BC%98%E9%9B%85%E7%9A%84Python%E4%B9%8Bfotmat.html"/>
    <id>http://dscdtc.ml/优雅的Python之fotmat.html</id>
    <published>2017-12-21T01:18:50.000Z</published>
    <updated>2018-01-21T11:00:42.731Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://dn-mhke0kuv.qbox.me/cff238212709802d1a16.png?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1" alt="Python format()"><br><a id="more"></a></p><h2 id="1-str-format-的引入"><a href="#1-str-format-的引入" class="headerlink" title="1 str.format 的引入"></a>1 str.format 的引入</h2><p>在 Python 中，我们可以使用 + 来连接字符串，在简单情况下这种方式能够很好的工作。但是当我们需要进行复杂的字符串连接时，如果依然使用 + 来完成，不仅会使代码变得晦涩难懂，还会让代码变得难以维护，此时这种方式就显得力不从心了。</p><p>例如，我们想打印这样一条记录：</p><p><code>User:John has completed Action:payment at Time:13:30:00</code><br>如果使用加号实现，会是下面这种形式：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"User:"</span> + user_name + <span class="string">" has completed Action:"</span> + \</div><div class="line">            action_name + <span class="string">" at Time:"</span> + current_time</div></pre></td></tr></table></figure><p>如果以后回过头来阅读这段代码，我们很难直观看出它的输出格式，且修改起来也相对麻烦。</p><p>我们可以换用 % 来实现：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"User:%s has completed Action:%s at Time:%s"</span> % \</div><div class="line">        (user_name, action_name, current_time)</div></pre></td></tr></table></figure><p>这回代码变得清晰简洁多了。</p><p>不过，Python 为我们提供了另一种简洁优雅的实现方式，也是官方更加推荐的方式：使用 str.format() 来实现字符串的格式化：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"User:&#123;&#125; has completed Action:&#123;&#125; at Time:&#123;&#125;"</span>.format(</div><div class="line">        user_name, action_name, current_time)</div></pre></td></tr></table></figure><p><code>str.format()</code> 既能够用于简单的场景，也能够胜任复杂的字符串替换，而无需繁琐的字符串连接操作。Python 的内置类型 str 和 unicode 均支持使用 str.format() 来格式化字符串。</p><p>我们接下来就详细地讨论 str.format() 的具体用法。</p><h2 id="2-str-format-基本语法"><a href="#2-str-format-基本语法" class="headerlink" title="2 str.format 基本语法"></a>2 str.format 基本语法</h2><p>格式化字符串使用花括号 &#123;&#125; 来包围替换字段，也就是待替换的字符串。而未被花括号包围的字符会原封不动地出现在结果中。</p><h3 id="2-1-使用位置索引"><a href="#2-1-使用位置索引" class="headerlink" title="2.1 使用位置索引"></a>2.1 使用位置索引</h3><p>以下两种写法是等价的：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Hello, &#123;&#125; and &#123;&#125;!"</span>.format(<span class="string">"John"</span>, <span class="string">"Mary"</span>)</div><div class="line"></div><div class="line"><span class="string">"Hello, &#123;0&#125; and &#123;1&#125;!"</span>.format(<span class="string">"John"</span>, <span class="string">"Mary"</span>)</div></pre></td></tr></table></figure><p>花括号内部可以写上目标字符串的索引，也可以省略。如果省略，则按 format 括号里的目标字符串顺序依次替换。</p><h3 id="2-2-使用关键字索引"><a href="#2-2-使用关键字索引" class="headerlink" title="2.2 使用关键字索引"></a>2.2 使用关键字索引</h3><p>除了通过位置来指定目标字符串，我们还可以通过关键字来指定它。</p><p>例如：</p><p><code>&quot;Hello, {boy} and {girl}!&quot;.format(boy=&quot;John&quot;, girl=&quot;Mary&quot;)</code><br>使用关键字索引的好处是，我们无需关心参数的位置，且字符串的最终结果能够一目了然。在以后的代码维护中，我们能够快速地修改对应的参数，而不用对照字符串挨个去寻找相应的参数。</p><p>注意：如果字符串本身含有花括号，则需要将其重复两次来转义。例如，字符串本身含有 {，为了让 Python 知道这是一个普通字符，而不是用于包围替换字段的花括号，我们只需将它改写成 &#123;&#123; 即可。</p><h2 id="3-str-format-高级语法"><a href="#3-str-format-高级语法" class="headerlink" title="3 str.format 高级语法"></a>3 str.format 高级语法</h2><p>str.format 非常强大，足以完成日常工作中遇到的格式化输出。熟练掌握该方法，能够为以后的字符串处理打好基础，还能节省不少时间。</p><h3 id="3-1-访问参数的属性或元素"><a href="#3-1-访问参数的属性或元素" class="headerlink" title="3.1 访问参数的属性或元素"></a>3.1 访问参数的属性或元素</h3><p>在使用 str.format 来格式化字符串时，我们通常将目标字符串作为参数传递给 format 方法。实际上，我们还可以在格式化字符串中访问参数的某个属性或某个元素：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"My car is &#123;0.color&#125;."</span>.format(black_car)</div><div class="line"><span class="string">"The first student is &#123;student[0]&#125;."</span>.format(student=stu_list)</div><div class="line"><span class="string">"John is &#123;d[john]&#125; years old."</span>.format(d=age_dict)</div></pre></td></tr></table></figure><h3 id="3-2-参数输出转换"><a href="#3-2-参数输出转换" class="headerlink" title="3.2 参数输出转换"></a>3.2 参数输出转换</h3><p>参数的字符串输出，默认是由其自身的 <strong>format</strong> 方法来实现的。也就是说，Python 使用参数的 <strong>format</strong> 输出来取代替换字段。如果我们想调用 str() 或 repr() 来转换参数，可以通过添加 转换标志 来实现：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#call str() on argument</span></div><div class="line"><span class="string">"It's a &#123;0!s&#125;."</span></div><div class="line"></div><div class="line"><span class="comment">#call repr() on argument</span></div><div class="line"><span class="string">"We can get info from &#123;name!r&#125;."</span></div></pre></td></tr></table></figure><h2 id="4-str-format-一般形式"><a href="#4-str-format-一般形式" class="headerlink" title="4 str.format 一般形式"></a>4 str.format 一般形式</h2><p>格式化字符串的一般形式如下：</p><p><code>&quot;... {field_name!conversion:format_spec} ...&quot;</code><br>从上面的代码可以看到，格式化字符串可分为 field_name、conversion、format_spec 三部分，分别对应替换字段名称（索引）、转换标志、格式描述。其中，字段名称是必选的，而后两者是可选的。转换标志紧跟在英文感叹号后面，而格式描述紧跟在英文冒号后面。</p><p>前面已经提到过，字段名称既可是位置索引，也可是关键字索引。字段名称后面可以通过点来访问属性，或通过方括号来访问元素。</p><p>在这里，我们重点看一下格式描述（format_spec）这一项。</p><p>格式描述中含有6个选项，分别是 fill、align、sign、width、precision、type。<br>它们的位置关系如下：</p><p><code>[[fill]align][sign][#][0][width][,][.precision][type]</code></p><blockquote><p>fill</p></blockquote><p>可以是任意字符，默认为空格。</p><blockquote><p>align</p></blockquote><p>仅当指定最小宽度时有效。</p><ul><li>&lt; 左对齐(默认选项)</li><li>> 右对齐</li><li>= 仅对数字有效；将填充字符放到符号与数字间，例如 +0001234</li><li>^ 居中对齐</li></ul><blockquote><p>sign 仅对数字有效</p></blockquote><ul><li>+ 所有数字均带有符号</li><li>- 仅负数带有符号（默认选项）</li><li>空格；正数前面带空格，负数前面带符号</li><li>\’#’ 只对整数有效,自动在二进制、八进制、十六进制数值前添加对应的 0b、0o、 0x。</li><li><p>‘,’ 自动在每三个数字之间添加 , 分隔符。</p></li><li><p>width 十进制数字，定义最小宽度。如果未指定，则由内容的宽度来决定。</p></li><li><p>如果没有指定对齐方式（align），那么可以在 width 前面添加一个0来实现自动填充0，等价于 fill 设为 0 并且 align 设为 =。</p></li></ul><blockquote><p>precision<br>用于确定浮点数的精度，或字符串的最大长度。不可用于整型数值。<br>type<br>确定参数类型，默认为 s ，即字符串。<br>整数输出类型：</p><ul><li>b：以二进制格式输出</li><li>c：将整数转换成对应的 unicode 字符</li><li>d：以十进制输出（默认选项）</li><li>o：以八进制输出</li><li>x：以十六进制小写输出</li><li>X：以十六进制大写输出</li><li>n：与 d 相同，但使用当前环境的分隔符来分隔每3位数字</li></ul><p>十进制浮点数输出类型：</p></blockquote><ul><li>e：指数标记；使用科学计数法输出，用e来表示指数部分，默认 precision 为6</li><li>E：与 e 相同，但使用大写 E 来表示指数部分</li><li>f：以定点形式输出数值，默认 precision 为6</li><li>F：与 f 相同</li><li>g：通用格式；对于给定的 precision p &gt;= 1，取数值的p位有效数字，并以定点或科学计数法输出（默认选项）</li><li>G：通用格式；与 g 相同，当数值过大时使用 E 来表示指数部分</li><li>n：与 g 相同，但使用当前环境的分隔符来分隔每3位数字</li><li>%：百分比标记；使用百分比的形式输出数值，同时设定 f 标记</li></ul><h2 id="举个栗子-gt-gt-gt"><a href="#举个栗子-gt-gt-gt" class="headerlink" title="举个栗子&gt;&gt;&gt;"></a>举个栗子&gt;&gt;&gt;</h2><p>　　它通过&#123;&#125;和:来代替传统%方式</p><blockquote><p>1、使用位置参数</p></blockquote><p>要点：从以下例子可以看出位置参数不受顺序约束，且可以为{},只要format里有相对应的参数值即可,参数索引从0开，传入位置参数列表可用*列表</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="string">'hoho'</span>,<span class="number">18</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(<span class="string">'hoho'</span>,<span class="number">18</span>)</div><div class="line"><span class="string">'my name is hoho ,age 18'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;1&#125; ,age &#123;0&#125;'</span>.format(<span class="number">10</span>,<span class="string">'hoho'</span>)</div><div class="line"><span class="string">'my name is hoho ,age 10'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;1&#125; ,age &#123;0&#125; &#123;1&#125;'</span>.format(<span class="number">10</span>,<span class="string">'hoho'</span>)</div><div class="line"><span class="string">'my name is hoho ,age 10 hoho'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;&#125; ,age &#123;&#125;'</span>.format(*li)</div><div class="line"><span class="string">'my name is hoho ,age 18'</span></div></pre></td></tr></table></figure><blockquote><p>2、使用关键字参数</p></blockquote><p>要点：关键字参数值要对得上，可用字典当关键字参数传入值，字典前加**即可</p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>hash = &#123;<span class="string">'name'</span>:<span class="string">'hoho'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(name=<span class="string">'hoho'</span>,age=<span class="number">19</span>)</div><div class="line"><span class="string">'my name is hoho,age is 19'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'my name is &#123;name&#125;,age is &#123;age&#125;'</span>.format(**hash)</div><div class="line"><span class="string">'my name is hoho,age is 18'</span></div></pre></td></tr></table></figure><blockquote><p>3、填充与格式化</p></blockquote><p><code>:[填充字符][对齐方式 &lt;^&gt;][宽度]</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:*&gt;10&#125;'</span>.format(<span class="number">10</span>)  <span class="comment">##右对齐</span></div><div class="line"><span class="string">'********10'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:*&lt;10&#125;'</span>.format(<span class="number">10</span>)  <span class="comment">##左对齐</span></div><div class="line"><span class="string">'10********'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:*^10&#125;'</span>.format(<span class="number">10</span>)  <span class="comment">##居中对齐</span></div><div class="line"><span class="string">'****10****'</span></div></pre></td></tr></table></figure><blockquote><p>4、精度与进制</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:.2f&#125;'</span>.format(<span class="number">1</span>/<span class="number">3</span>)</div><div class="line"><span class="string">'0.33'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">10</span>)    <span class="comment">#二进制</span></div><div class="line"><span class="string">'1010'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">10</span>)     <span class="comment">#八进制</span></div><div class="line"><span class="string">'12'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">10</span>)     <span class="comment">#16进制</span></div><div class="line"><span class="string">'a'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:,&#125;'</span>.format(<span class="number">12369132698</span>)  <span class="comment">#千分位格式化</span></div><div class="line"><span class="string">'12,369,132,698'</span></div></pre></td></tr></table></figure><blockquote><p>5、使用索引</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>li</div><div class="line">[<span class="string">'hoho'</span>, <span class="number">18</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'name is &#123;0[0]&#125; age is &#123;0[1]&#125;'</span>.format(li)</div><div class="line"><span class="string">'name is hoho age is 18</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://dn-mhke0kuv.qbox.me/cff238212709802d1a16.png?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1&quot; alt=&quot;Python format()&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://dscdtc.ml/categories/Python/"/>
    
    
      <category term="Python" scheme="http://dscdtc.ml/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JS简写技巧</title>
    <link href="http://dscdtc.ml/JS%E7%AE%80%E5%86%99%E6%8A%80%E5%B7%A7.html"/>
    <id>http://dscdtc.ml/JS简写技巧.html</id>
    <published>2017-10-25T02:44:23.000Z</published>
    <updated>2018-01-21T11:00:42.731Z</updated>
    
    <content type="html"><![CDATA[<p>本篇仅记录经常遗忘的方法, 更详细的内容<a href="https://www.sitepoint.com/shorthand-javascript-techniques/" target="_blank" rel="noopener">参见原文</a><br><a id="more"></a></p><h3 id="1-三目运算符"><a href="#1-三目运算符" class="headerlink" title="1. 三目运算符"></a>1. 三目运算符</h3><p>下面是一个很好的例子，将一个完整的 if 语句，简写为一行代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">let</span> answer;</div><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</div><div class="line">    answer = <span class="string">'greater than 10'</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    answer = <span class="string">'less than 10'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> answer = x &gt; <span class="number">10</span> ? <span class="string">'greater than 10'</span> : <span class="string">'less than 10'</span>;</div></pre></td></tr></table></figure><h3 id="2-循环语句"><a href="#2-循环语句" class="headerlink" title="2. 循环语句"></a>2. 循环语句</h3><p>当使用纯 JavaScript（不依赖外部库，如 jQuery 或 lodash）时，下面的简写会非常有用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allImgs.length; i++)</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> allImgs)</div></pre></td></tr></table></figure></p><p>下面是遍历数组 forEach 的简写示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a["</span> + index + <span class="string">"] = "</span> + element);</div><div class="line">&#125;</div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">// logs:</span></div><div class="line"><span class="comment">// a[0] = 2</span></div><div class="line"><span class="comment">// a[1] = 5</span></div><div class="line"><span class="comment">// a[2] = 9</span></div></pre></td></tr></table></figure></p><h3 id="3-声明变量"><a href="#3-声明变量" class="headerlink" title="3. 声明变量"></a>3. 声明变量</h3><p>在函数开始之前，对变量进行赋值是一种很好的习惯。在申明多个变量时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x;</div><div class="line"><span class="keyword">let</span> y;</div><div class="line"><span class="keyword">let</span> z = <span class="number">3</span>;</div></pre></td></tr></table></figure></p><p>可以简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x, y, z=<span class="number">3</span>;</div></pre></td></tr></table></figure></p><h3 id="4-十进制数"><a href="#4-十进制数" class="headerlink" title="4.十进制数"></a>4.十进制数</h3><p>可以使用科学计数法来代替较大的数据，如可以将 10000000 简写为 1e7。<br>xey = x*10^y<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123; &#125;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123; &#125;</div></pre></td></tr></table></figure></p><h3 id="5-变量赋值"><a href="#5-变量赋值" class="headerlink" title="5.  变量赋值"></a>5.  变量赋值</h3><p>当将一个变量的值赋给另一个变量时，首先需要确保原值不是 null、未定义的或空值。</p><p>可以通过编写一个包含多个条件的判断语句来实现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123;</div><div class="line">     <span class="keyword">let</span> variable2 = variable1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者简写为以下的形式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> variable2 = variable1  || <span class="string">'new'</span>;</div></pre></td></tr></table></figure></p><p>可以将下面的代码粘贴到 es6console 中，自己测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable1;</div><div class="line"><span class="keyword">let</span> variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2 === <span class="string">''</span>); <span class="comment">// prints true</span></div><div class="line">variable1 = <span class="string">'foo'</span>;</div><div class="line">variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2); <span class="comment">// prints foo</span></div></pre></td></tr></table></figure></p><h3 id="6-对象属性"><a href="#6-对象属性" class="headerlink" title="6. 对象属性"></a>6. 对象属性</h3><p>ES6 提供了一个很简单的办法，来分配属性的对象。如果属性名与 key 名相同，则可以使用简写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:x, <span class="attr">y</span>:y &#125;;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;;</div></pre></td></tr></table></figure></p><h3 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7. 箭头函数"></a>7. 箭头函数</h3><p>经典函数很容易读写，但是如果把它们嵌套在其它函数中进行调用时，整个函数就会变得有些冗长和混乱。这时候可以使用箭头函数来简写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>)</div><div class="line">&#125;, <span class="number">2000</span>);</div><div class="line"> </div><div class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>), <span class="number">2000</span>);</div><div class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</div></pre></td></tr></table></figure></p><h3 id="8-隐式返回值"><a href="#8-隐式返回值" class="headerlink" title="8. 隐式返回值"></a>8. 隐式返回值</h3><p>返回值是我们通常用来返回函数最终结果的关键字。只有一个语句的箭头函数，可以隐式返回结果（函数必须省略括号（{ }），以便省略返回关键字）。</p><p>要返回多行语句（例如对象文本），需要使用（）而不是{ }来包裹函数体。这样可以确保代码以单个语句的形式进行求值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> (</div><div class="line">  <span class="built_in">Math</span>.PI * diameter;</div><div class="line">)</div></pre></td></tr></table></figure></p><h3 id="9-默认参数值"><a href="#9-默认参数值" class="headerlink" title="9. 默认参数值"></a>9. 默认参数值</h3><p>可以使用 if 语句来定义函数参数的默认值。ES6 中规定了可以在函数声明中定义默认值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (w === <span class="literal">undefined</span>)</div><div class="line">    w = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span> (h === <span class="literal">undefined</span>)</div><div class="line">    h = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> l * w * h;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">3</span>, h = <span class="number">4</span> </span>) =&gt;</span> (l * w * h);</div><div class="line">volume(<span class="number">2</span>) <span class="comment">//output: 24</span></div></pre></td></tr></table></figure></p><h3 id="10-解构赋值"><a href="#10-解构赋值" class="headerlink" title="10. 解构赋值"></a>10. 解构赋值</h3><p>解构赋值是一种表达式，用于从数组或对象中快速提取属性值，并赋给定义的变量。</p><p>在代码简写方面，解构赋值能达到很好的效果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> observable = <span class="built_in">require</span>(<span class="string">'mobx/observable'</span>);</div><div class="line"><span class="keyword">const</span> action = <span class="built_in">require</span>(<span class="string">'mobx/action'</span>);</div><div class="line"><span class="keyword">const</span> runInAction = <span class="built_in">require</span>(<span class="string">'mobx/runInAction'</span>);</div><div class="line"><span class="keyword">const</span> store = <span class="keyword">this</span>.props.store;</div><div class="line"><span class="keyword">const</span> form = <span class="keyword">this</span>.props.form;</div><div class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.props.loading;</div><div class="line"><span class="keyword">const</span> errors = <span class="keyword">this</span>.props.errors;</div><div class="line"><span class="keyword">const</span> entity = <span class="keyword">this</span>.props.entity;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, action, runInAction &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, entity &#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure></p><p>甚至可以指定自己的变量名：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, <span class="attr">entity</span>:contact &#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure></p><h3 id="11-展开运算符"><a href="#11-展开运算符" class="headerlink" title="11. 展开运算符"></a>11. 展开运算符</h3><p>展开运算符是在 ES6 中引入的，使用展开运算符能够让 JavaScript 代码更加有效和有趣。</p><p>使用展开运算符可以替换某些数组函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>].concat(odd);</div><div class="line"> </div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = arr.slice( )</div><div class="line">简写为：</div><div class="line"></div><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd];</div><div class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 2, 4, 6, 1, 3, 5 ]</span></div><div class="line"> </div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = [...arr];</div><div class="line">和 concat( ) 功能不同的是，用户可以使用扩展运算符在任何一个数组中插入另一个数组。</div><div class="line"></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</div><div class="line">也可以将展开运算符和 ES6 解构符号结合使用：</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></div></pre></td></tr></table></figure></p><h3 id="12-强制参数"><a href="#12-强制参数" class="headerlink" title="12. 强制参数"></a>12. 强制参数</h3><p>默认情况下，如果不向函数参数传值，那么 JavaScript 会将函数参数设置为未定义。其它一些语言则会发出警告或错误。要执行参数分配，可以使用if语句抛出未定义的错误，或者可以利用“强制参数”。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(bar === <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mandatory = <span class="function"><span class="params">( )</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">&#125;</div><div class="line">foo = <span class="function">(<span class="params">bar = mandatory( </span>)) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="13-Array-find"><a href="#13-Array-find" class="headerlink" title="13. Array.find"></a>13. Array.find</h3><p>如果你曾经编写过普通 JavaScript 中的 find 函数，那么你可能使用了 for 循环。在 ES6 中，介绍了一种名为 find（）的新数组函数，可以实现 for 循环的简写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pets = [</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Max'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Cat'</span>, <span class="attr">name</span>: <span class="string">'Karl'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Tommy'</span>&#125;,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;pets.length; ++i) &#123;</div><div class="line">    <span class="keyword">if</span>(pets[i].type === <span class="string">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</div><div class="line">      <span class="keyword">return</span> pets[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type ===<span class="string">'Dog'</span> &amp;&amp; pet.name === <span class="string">'Tommy'</span>);</div><div class="line"><span class="built_in">console</span>.log(pet); <span class="comment">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></div></pre></td></tr></table></figure></p><h3 id="14-Object-key"><a href="#14-Object-key" class="headerlink" title="14. Object [key]"></a>14. Object [key]</h3><p>虽然将 foo.bar 写成 foo [‘bar’] 是一种常见的做法，但是这种做法构成了编写可重用代码的基础。</p><p>请考虑下面这个验证函数的简化示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">values</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!values.first)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>(!values.last)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(validate(&#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>上面的函数完美的完成验证工作。但是当有很多表单，则需要应用验证，此时会有不同的字段和规则。如果可以构建一个在运行时配置的通用验证函数，会是一个好选择。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// object validation rules</span></div><div class="line"><span class="keyword">const</span> schema = &#123;</div><div class="line">  first: &#123;</div><div class="line">    required:<span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  last: &#123;</div><div class="line">    required:<span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// universal validation function</span></div><div class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">schema, values</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span>(field <span class="keyword">in</span> schema) &#123;</div><div class="line">    <span class="keyword">if</span>(schema[field].required) &#123;</div><div class="line">      <span class="keyword">if</span>(!values[field]) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>&#125;)); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p><p>现在有了这个验证函数，我们就可以在所有窗体中重用，而无需为每个窗体编写自定义验证函数。</p><h3 id="15-双位操作符"><a href="#15-双位操作符" class="headerlink" title="15. 双位操作符"></a>15. 双位操作符</h3><p>位操作符是 JavaScript 初级教程的基本知识点，但是我们却不常使用位操作符。因为在不处理二进制的情况下，没有人愿意使用 1 和 0。</p><p>但是双位操作符却有一个很实用的案例。取值为正数时,可以使用双位操作符来替代<code>Math.floor( )</code>。双否定位操作符的优势在于它执行相同的操作运行速度更快。<br>[原理:浮点数不能进行位运算,在使用位操作符时js会将其转化为32位整形数]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>  <span class="comment">//true</span></div></pre></td></tr></table></figure><p>简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~~<span class="number">4.9</span> === <span class="number">4</span>  <span class="comment">//true</span></div><div class="line">**负数时<span class="string">`Math.floor(Num) != ~~Num`</span>**</div><div class="line">~~<span class="number">-4.9</span> <span class="comment">// -4</span></div><div class="line"><span class="built_in">Math</span>.floor(<span class="number">-4.9</span>) <span class="comment">// -5</span></div></pre></td></tr></table></figure></p><p>数值大于0时,效果等同于无符号位移:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4.9</span> &gt;&gt;&gt; <span class="number">0</span> <span class="comment">// 4</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇仅记录经常遗忘的方法, 更详细的内容&lt;a href=&quot;https://www.sitepoint.com/shorthand-javascript-techniques/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参见原文&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://dscdtc.ml/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://dscdtc.ml/tags/Javascript/"/>
    
  </entry>
  
</feed>
